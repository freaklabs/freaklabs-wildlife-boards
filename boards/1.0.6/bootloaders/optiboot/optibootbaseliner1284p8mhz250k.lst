
optibootbaseliner1284p8mhz250k.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000282  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000022e  0001fc00  0001fc00  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000011  00000000  00000000  00000282  2**0
                  CONTENTS, READONLY
  3 .version      00000002  00000000  00000000  00000293  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000295  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000004ef  00000000  00000000  000002bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001ff  00000000  00000000  000007ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003c5  00000000  00000000  000009ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000008c  00000000  00000000  00000d70  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001b7  00000000  00000000  00000dfc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000323  00000000  00000000  00000fb3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000078  00000000  00000000  000012d6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0001fc00 <main>:
  //  SP points to RAMEND
  //  r1 contains zero
  //
  // If not, uncomment the following instructions:
  // cli();
  asm volatile ("clr __zero_reg__");
   1fc00:	11 24       	eor	r1, r1
#ifdef __AVR_ATmega8__
  SP=RAMEND;  // This is done by hardware reset
#endif

  // Adaboot no-wait mod
  ch = MCUSR;
   1fc02:	84 b7       	in	r24, 0x34	; 52
  MCUSR = 0;
   1fc04:	14 be       	out	0x34, r1	; 52
  if (!(ch & _BV(EXTRF))) appStart();
   1fc06:	81 ff       	sbrs	r24, 1
   1fc08:	0a d1       	rcall	.+532    	; 0x1fe1e <appStart>

#if LED_START_FLASHES > 0
  // Set up Timer 1 for timeout counter
  TCCR1B = _BV(CS12) | _BV(CS10); // div 1024
   1fc0a:	85 e0       	ldi	r24, 0x05	; 5
   1fc0c:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
  UCSRA = _BV(U2X); //Double speed mode USART
  UCSRB = _BV(RXEN) | _BV(TXEN);  // enable Rx & Tx
  UCSRC = _BV(URSEL) | _BV(UCSZ1) | _BV(UCSZ0);  // config USART; 8N1
  UBRRL = (uint8_t)( (F_CPU + BAUD_RATE * 4L) / (BAUD_RATE * 8L) - 1 );
#else
  UCSR0A = _BV(U2X0); //Double speed mode USART0
   1fc10:	82 e0       	ldi	r24, 0x02	; 2
   1fc12:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
  UCSR0B = _BV(RXEN0) | _BV(TXEN0);
   1fc16:	88 e1       	ldi	r24, 0x18	; 24
   1fc18:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
  UCSR0C = _BV(UCSZ00) | _BV(UCSZ01);
   1fc1c:	96 e0       	ldi	r25, 0x06	; 6
   1fc1e:	90 93 c2 00 	sts	0x00C2, r25	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
  UBRR0L = (uint8_t)( (F_CPU + BAUD_RATE * 4L) / (BAUD_RATE * 8L) - 1 );
   1fc22:	93 e0       	ldi	r25, 0x03	; 3
   1fc24:	90 93 c4 00 	sts	0x00C4, r25	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    "wdr\n"
  );
}

void watchdogConfig(uint8_t x) {
  WDTCSR = _BV(WDCE) | _BV(WDE);
   1fc28:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
  WDTCSR = x;
   1fc2c:	8e e0       	ldi	r24, 0x0E	; 14
   1fc2e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>

  // Set up watchdog to trigger after 500ms
  watchdogConfig(WATCHDOG_1S);

  /* Set LED pin as output */
  LED_DDR |= _BV(LED);
   1fc32:	21 9a       	sbi	0x04, 1	; 4
   1fc34:	86 e0       	ldi	r24, 0x06	; 6
}

#if LED_START_FLASHES > 0
void flash_led(uint8_t count) {
  do {
    TCNT1 = -(F_CPU/(1024*16));
   1fc36:	28 e1       	ldi	r18, 0x18	; 24
   1fc38:	3e ef       	ldi	r19, 0xFE	; 254
    TIFR1 = _BV(TOV1);
   1fc3a:	91 e0       	ldi	r25, 0x01	; 1
}

#if LED_START_FLASHES > 0
void flash_led(uint8_t count) {
  do {
    TCNT1 = -(F_CPU/(1024*16));
   1fc3c:	30 93 85 00 	sts	0x0085, r19	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
   1fc40:	20 93 84 00 	sts	0x0084, r18	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    TIFR1 = _BV(TOV1);
   1fc44:	96 bb       	out	0x16, r25	; 22
    while(!(TIFR1 & _BV(TOV1)));
   1fc46:	b0 9b       	sbis	0x16, 0	; 22
   1fc48:	fe cf       	rjmp	.-4      	; 0x1fc46 <main+0x46>
#ifdef __AVR_ATmega8__
    LED_PORT ^= _BV(LED);
#else
    LED_PIN |= _BV(LED);
   1fc4a:	19 9a       	sbi	0x03, 1	; 3
}
#endif

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
   1fc4c:	a8 95       	wdr
   1fc4e:	81 50       	subi	r24, 0x01	; 1
    LED_PORT ^= _BV(LED);
#else
    LED_PIN |= _BV(LED);
#endif
    watchdogReset();
  } while (--count);
   1fc50:	a9 f7       	brne	.-22     	; 0x1fc3c <main+0x3c>
   * Making these local and in registers prevents the need for initializing
   * them, and also saves space because code no longer stores to memory.
   * (initializing address keeps the compiler happy, but isn't really
   *  necessary, and uses 4 bytes of flash.)
   */
  register uint16_t address = 0;
   1fc52:	d0 e0       	ldi	r29, 0x00	; 0
   1fc54:	c0 e0       	ldi	r28, 0x00	; 0
    "wdr\n"
  );
}

void watchdogConfig(uint8_t x) {
  WDTCSR = _BV(WDCE) | _BV(WDE);
   1fc56:	08 e1       	ldi	r16, 0x18	; 24
  WDTCSR = x;
   1fc58:	48 e0       	ldi	r20, 0x08	; 8
   1fc5a:	f4 2e       	mov	r15, r20
      ch = SPM_PAGESIZE / 2;
      do {
        uint16_t a;
        a = *bufPtr++;
        a |= (*bufPtr++) << 8;
        __boot_page_fill_short((uint16_t)(void*)addrPtr,a);
   1fc5c:	ee 24       	eor	r14, r14
   1fc5e:	e3 94       	inc	r14
      __boot_page_write_short((uint16_t)(void*)address);
      boot_spm_busy_wait();

#if defined(RWWSRE)
      // Reenable read access to flash
      boot_rww_enable();
   1fc60:	51 e1       	ldi	r21, 0x11	; 17
   1fc62:	b5 2e       	mov	r11, r21
#endif

  /* Forever loop */
  for (;;) {
    /* get character from UART */
    ch = getch();
   1fc64:	13 e0       	ldi	r17, 0x03	; 3
   1fc66:	b6 d0       	rcall	.+364    	; 0x1fdd4 <getch>

    if(ch == STK_GET_PARAMETER) {
   1fc68:	81 34       	cpi	r24, 0x41	; 65
      unsigned char which = getch();
   1fc6a:	91 f4       	brne	.+36     	; 0x1fc90 <main+0x90>
   1fc6c:	b3 d0       	rcall	.+358    	; 0x1fdd4 <getch>
      verifySpace();
   1fc6e:	d8 2e       	mov	r13, r24
   1fc70:	bd d0       	rcall	.+378    	; 0x1fdec <verifySpace>
      if (which == 0x82) {
   1fc72:	82 e8       	ldi	r24, 0x82	; 130
   1fc74:	d8 12       	cpse	r13, r24
	/*
	 * Send optiboot version as "minor SW version"
	 */
	putch(OPTIBOOT_MINVER);
   1fc76:	03 c0       	rjmp	.+6      	; 0x1fc7e <main+0x7e>
   1fc78:	84 e0       	ldi	r24, 0x04	; 4
   1fc7a:	a5 d0       	rcall	.+330    	; 0x1fdc6 <putch>
      } else if (which == 0x81) {
   1fc7c:	a1 c0       	rjmp	.+322    	; 0x1fdc0 <main+0x1c0>
   1fc7e:	e1 e8       	ldi	r30, 0x81	; 129
	  putch(OPTIBOOT_MAJVER);
   1fc80:	de 12       	cpse	r13, r30
   1fc82:	03 c0       	rjmp	.+6      	; 0x1fc8a <main+0x8a>
   1fc84:	84 e0       	ldi	r24, 0x04	; 4
   1fc86:	9f d0       	rcall	.+318    	; 0x1fdc6 <putch>
      } else {
	/*
	 * GET PARAMETER returns a generic 0x03 reply for
         * other parameters - enough to keep Avrdude happy
	 */
	putch(0x03);
   1fc88:	9b c0       	rjmp	.+310    	; 0x1fdc0 <main+0x1c0>
   1fc8a:	83 e0       	ldi	r24, 0x03	; 3
   1fc8c:	9c d0       	rcall	.+312    	; 0x1fdc6 <putch>
      }
    }
    else if(ch == STK_SET_DEVICE) {
   1fc8e:	98 c0       	rjmp	.+304    	; 0x1fdc0 <main+0x1c0>
      // SET DEVICE is ignored
      getNch(20);
   1fc90:	82 34       	cpi	r24, 0x42	; 66
   1fc92:	19 f4       	brne	.+6      	; 0x1fc9a <main+0x9a>
   1fc94:	84 e1       	ldi	r24, 0x14	; 20
    }
    else if(ch == STK_SET_DEVICE_EXT) {
   1fc96:	b6 d0       	rcall	.+364    	; 0x1fe04 <getNch>
   1fc98:	93 c0       	rjmp	.+294    	; 0x1fdc0 <main+0x1c0>
      // SET DEVICE EXT is ignored
      getNch(5);
   1fc9a:	85 34       	cpi	r24, 0x45	; 69
   1fc9c:	19 f4       	brne	.+6      	; 0x1fca4 <main+0xa4>
   1fc9e:	85 e0       	ldi	r24, 0x05	; 5
    }
    else if(ch == STK_LOAD_ADDRESS) {
   1fca0:	b1 d0       	rcall	.+354    	; 0x1fe04 <getNch>
   1fca2:	8e c0       	rjmp	.+284    	; 0x1fdc0 <main+0x1c0>
      // LOAD ADDRESS
      uint16_t newAddress;
      newAddress = getch();
   1fca4:	85 35       	cpi	r24, 0x55	; 85
   1fca6:	79 f4       	brne	.+30     	; 0x1fcc6 <main+0xc6>
   1fca8:	95 d0       	rcall	.+298    	; 0x1fdd4 <getch>
   1fcaa:	c8 2f       	mov	r28, r24
      newAddress = (newAddress & 0xff) | (getch() << 8);
   1fcac:	d0 e0       	ldi	r29, 0x00	; 0
   1fcae:	92 d0       	rcall	.+292    	; 0x1fdd4 <getch>
#ifdef RAMPZ
      // Transfer top bit to RAMPZ
      RAMPZ = (newAddress & 0x8000) ? 1 : 0;
   1fcb0:	d8 2b       	or	r29, r24
   1fcb2:	ce 01       	movw	r24, r28
   1fcb4:	88 27       	eor	r24, r24
   1fcb6:	99 0f       	add	r25, r25
#endif
      newAddress += newAddress; // Convert from word address to byte address
   1fcb8:	88 1f       	adc	r24, r24
   1fcba:	99 27       	eor	r25, r25
      address = newAddress;
      verifySpace();
   1fcbc:	8b bf       	out	0x3b, r24	; 59
   1fcbe:	cc 0f       	add	r28, r28
    }
    else if(ch == STK_UNIVERSAL) {
   1fcc0:	dd 1f       	adc	r29, r29
      // UNIVERSAL command is ignored
      getNch(4);
   1fcc2:	94 d0       	rcall	.+296    	; 0x1fdec <verifySpace>
   1fcc4:	7d c0       	rjmp	.+250    	; 0x1fdc0 <main+0x1c0>
   1fcc6:	86 35       	cpi	r24, 0x56	; 86
      putch(0x00);
   1fcc8:	29 f4       	brne	.+10     	; 0x1fcd4 <main+0xd4>
   1fcca:	84 e0       	ldi	r24, 0x04	; 4
   1fccc:	9b d0       	rcall	.+310    	; 0x1fe04 <getNch>
   1fcce:	80 e0       	ldi	r24, 0x00	; 0
    }
    /* Write memory, length is big endian and is in bytes */
    else if(ch == STK_PROG_PAGE) {
   1fcd0:	7a d0       	rcall	.+244    	; 0x1fdc6 <putch>
   1fcd2:	76 c0       	rjmp	.+236    	; 0x1fdc0 <main+0x1c0>
   1fcd4:	84 36       	cpi	r24, 0x64	; 100
      // PROGRAM PAGE - we support flash programming only, not EEPROM
      uint8_t *bufPtr;
      uint16_t addrPtr;

      getch();			/* getlen() */
   1fcd6:	09 f0       	breq	.+2      	; 0x1fcda <main+0xda>
   1fcd8:	48 c0       	rjmp	.+144    	; 0x1fd6a <main+0x16a>
      length = getch();
   1fcda:	7c d0       	rcall	.+248    	; 0x1fdd4 <getch>
   1fcdc:	7b d0       	rcall	.+246    	; 0x1fdd4 <getch>
   1fcde:	a8 2e       	mov	r10, r24
      getch();
   1fce0:	79 d0       	rcall	.+242    	; 0x1fdd4 <getch>
   1fce2:	81 2c       	mov	r8, r1
   1fce4:	99 24       	eor	r9, r9
   1fce6:	93 94       	inc	r9

      // If we are in RWW section, immediately start page erase
      if (address < NRWWSTART) __boot_page_erase_short((uint16_t)(void*)address);
   1fce8:	c1 15       	cp	r28, r1
   1fcea:	f0 ee       	ldi	r31, 0xE0	; 224
   1fcec:	df 07       	cpc	r29, r31
   1fcee:	38 f4       	brcc	.+14     	; 0x1fcfe <main+0xfe>
   1fcf0:	fe 01       	movw	r30, r28
   1fcf2:	17 bf       	out	0x37, r17	; 55
   1fcf4:	e8 95       	spm
   1fcf6:	81 2c       	mov	r8, r1
   1fcf8:	99 24       	eor	r9, r9
   1fcfa:	93 94       	inc	r9
   1fcfc:	00 c0       	rjmp	.+0      	; 0x1fcfe <main+0xfe>

      // While that is going on, read in page contents
      bufPtr = buff;
      do *bufPtr++ = getch();
   1fcfe:	64 01       	movw	r12, r8
   1fd00:	ff ef       	ldi	r31, 0xFF	; 255
   1fd02:	cf 1a       	sub	r12, r31
   1fd04:	df 0a       	sbc	r13, r31
   1fd06:	66 d0       	rcall	.+204    	; 0x1fdd4 <getch>
   1fd08:	f4 01       	movw	r30, r8
   1fd0a:	80 83       	st	Z, r24
   1fd0c:	46 01       	movw	r8, r12
      while (--length);
   1fd0e:	ac 10       	cpse	r10, r12
   1fd10:	f6 cf       	rjmp	.-20     	; 0x1fcfe <main+0xfe>

      // If we are in NRWW section, page erase has to be delayed until now.
      // Todo: Take RAMPZ into account
      if (address >= NRWWSTART) __boot_page_erase_short((uint16_t)(void*)address);
   1fd12:	c1 15       	cp	r28, r1
   1fd14:	f0 ee       	ldi	r31, 0xE0	; 224
   1fd16:	df 07       	cpc	r29, r31
   1fd18:	18 f0       	brcs	.+6      	; 0x1fd20 <main+0x120>
   1fd1a:	fe 01       	movw	r30, r28
   1fd1c:	17 bf       	out	0x37, r17	; 55
   1fd1e:	e8 95       	spm

      // Read command terminator, start reply
      verifySpace();
   1fd20:	65 d0       	rcall	.+202    	; 0x1fdec <verifySpace>
   1fd22:	07 b6       	in	r0, 0x37	; 55

      // If only a partial page is to be programmed, the erase might not be complete.
      // So check that here
      boot_spm_busy_wait();
   1fd24:	00 fc       	sbrc	r0, 0
   1fd26:	fd cf       	rjmp	.-6      	; 0x1fd22 <main+0x122>
   1fd28:	fe 01       	movw	r30, r28
   1fd2a:	a0 e0       	ldi	r26, 0x00	; 0
        buff[1] = 0xce; // rjmp 0x1d00 instruction
      }
#endif

      // Copy buffer into programming buffer
      bufPtr = buff;
   1fd2c:	b1 e0       	ldi	r27, 0x01	; 1
   1fd2e:	01 c0       	rjmp	.+2      	; 0x1fd32 <main+0x132>
   1fd30:	d9 01       	movw	r26, r18
   1fd32:	9c 91       	ld	r25, X
      addrPtr = (uint16_t)(void*)address;
      ch = SPM_PAGESIZE / 2;
      do {
        uint16_t a;
        a = *bufPtr++;
   1fd34:	9d 01       	movw	r18, r26
   1fd36:	2e 5f       	subi	r18, 0xFE	; 254
   1fd38:	3f 4f       	sbci	r19, 0xFF	; 255
   1fd3a:	11 96       	adiw	r26, 0x01	; 1
        a |= (*bufPtr++) << 8;
   1fd3c:	8c 91       	ld	r24, X
   1fd3e:	11 97       	sbiw	r26, 0x01	; 1
   1fd40:	89 27       	eor	r24, r25
   1fd42:	98 27       	eor	r25, r24
   1fd44:	89 27       	eor	r24, r25
   1fd46:	0c 01       	movw	r0, r24
        __boot_page_fill_short((uint16_t)(void*)addrPtr,a);
   1fd48:	e7 be       	out	0x37, r14	; 55
   1fd4a:	e8 95       	spm
        addrPtr += 2;
      } while (--ch);
   1fd4c:	11 24       	eor	r1, r1
   1fd4e:	32 96       	adiw	r30, 0x02	; 2

      // Write from programming buffer
      __boot_page_write_short((uint16_t)(void*)address);
   1fd50:	ae 3f       	cpi	r26, 0xFE	; 254
   1fd52:	b1 40       	sbci	r27, 0x01	; 1
   1fd54:	69 f7       	brne	.-38     	; 0x1fd30 <main+0x130>
   1fd56:	85 e0       	ldi	r24, 0x05	; 5
      boot_spm_busy_wait();
   1fd58:	fe 01       	movw	r30, r28
   1fd5a:	87 bf       	out	0x37, r24	; 55

#if defined(RWWSRE)
      // Reenable read access to flash
      boot_rww_enable();
   1fd5c:	e8 95       	spm
   1fd5e:	07 b6       	in	r0, 0x37	; 55
   1fd60:	00 fc       	sbrc	r0, 0
#endif

    }
    /* Read memory block mode, length is big endian.  */
    else if(ch == STK_READ_PAGE) {
   1fd62:	fd cf       	rjmp	.-6      	; 0x1fd5e <main+0x15e>
   1fd64:	b7 be       	out	0x37, r11	; 55
      // READ PAGE - we only read flash
      getch();			/* getlen() */
   1fd66:	e8 95       	spm
   1fd68:	2b c0       	rjmp	.+86     	; 0x1fdc0 <main+0x1c0>
      length = getch();
   1fd6a:	84 37       	cpi	r24, 0x74	; 116
   1fd6c:	b1 f4       	brne	.+44     	; 0x1fd9a <main+0x19a>
   1fd6e:	32 d0       	rcall	.+100    	; 0x1fdd4 <getch>
      getch();
   1fd70:	31 d0       	rcall	.+98     	; 0x1fdd4 <getch>

      verifySpace();
   1fd72:	98 2e       	mov	r9, r24
   1fd74:	2f d0       	rcall	.+94     	; 0x1fdd4 <getch>
        putch(result);
        address++;
      }
      while (--length);
#else
      do putch(pgm_read_byte_near(address++));
   1fd76:	3a d0       	rcall	.+116    	; 0x1fdec <verifySpace>
   1fd78:	89 2c       	mov	r8, r9
   1fd7a:	fe 01       	movw	r30, r28
   1fd7c:	6f 01       	movw	r12, r30
   1fd7e:	8f ef       	ldi	r24, 0xFF	; 255
   1fd80:	c8 1a       	sub	r12, r24
      while (--length);
   1fd82:	d8 0a       	sbc	r13, r24
   1fd84:	84 91       	lpm	r24, Z
   1fd86:	1f d0       	rcall	.+62     	; 0x1fdc6 <putch>
   1fd88:	8a 94       	dec	r8
   1fd8a:	f6 01       	movw	r30, r12
   1fd8c:	81 10       	cpse	r8, r1
#endif
#endif
    }

    /* Get device signature bytes  */
    else if(ch == STK_READ_SIGN) {
   1fd8e:	f6 cf       	rjmp	.-20     	; 0x1fd7c <main+0x17c>
   1fd90:	21 96       	adiw	r28, 0x01	; 1
      // READ SIGN - return what Avrdude wants to hear
      verifySpace();
   1fd92:	9a 94       	dec	r9
   1fd94:	c9 0d       	add	r28, r9
      putch(SIGNATURE_0);
   1fd96:	d1 1d       	adc	r29, r1
   1fd98:	13 c0       	rjmp	.+38     	; 0x1fdc0 <main+0x1c0>
   1fd9a:	85 37       	cpi	r24, 0x75	; 117
      putch(SIGNATURE_1);
   1fd9c:	41 f4       	brne	.+16     	; 0x1fdae <main+0x1ae>
   1fd9e:	26 d0       	rcall	.+76     	; 0x1fdec <verifySpace>
   1fda0:	8e e1       	ldi	r24, 0x1E	; 30
      putch(SIGNATURE_2);
   1fda2:	11 d0       	rcall	.+34     	; 0x1fdc6 <putch>
   1fda4:	87 e9       	ldi	r24, 0x97	; 151
   1fda6:	0f d0       	rcall	.+30     	; 0x1fdc6 <putch>
   1fda8:	85 e0       	ldi	r24, 0x05	; 5
    }
    else if (ch == 'Q') {
   1fdaa:	0d d0       	rcall	.+26     	; 0x1fdc6 <putch>
   1fdac:	09 c0       	rjmp	.+18     	; 0x1fdc0 <main+0x1c0>
    "wdr\n"
  );
}

void watchdogConfig(uint8_t x) {
  WDTCSR = _BV(WDCE) | _BV(WDE);
   1fdae:	81 35       	cpi	r24, 0x51	; 81
   1fdb0:	31 f4       	brne	.+12     	; 0x1fdbe <main+0x1be>
  WDTCSR = x;
   1fdb2:	00 93 60 00 	sts	0x0060, r16	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
      putch(SIGNATURE_2);
    }
    else if (ch == 'Q') {
      // Adaboot no-wait mod
      watchdogConfig(WATCHDOG_16MS);
      verifySpace();
   1fdb6:	f0 92 60 00 	sts	0x0060, r15	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
   1fdba:	18 d0       	rcall	.+48     	; 0x1fdec <verifySpace>
    }
    else {
      // This covers the response to commands like STK_ENTER_PROGMODE
      verifySpace();
   1fdbc:	01 c0       	rjmp	.+2      	; 0x1fdc0 <main+0x1c0>
   1fdbe:	16 d0       	rcall	.+44     	; 0x1fdec <verifySpace>
    }
    putch(STK_OK);
   1fdc0:	80 e1       	ldi	r24, 0x10	; 16
   1fdc2:	01 d0       	rcall	.+2      	; 0x1fdc6 <putch>
   1fdc4:	50 cf       	rjmp	.-352    	; 0x1fc66 <main+0x66>

0001fdc6 <putch>:
#endif

  /* Forever loop */
  for (;;) {
    /* get character from UART */
    ch = getch();
   1fdc6:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
  }
}

void putch(char ch) {
#ifndef SOFT_UART
  while (!(UCSR0A & _BV(UDRE0)));
   1fdca:	95 ff       	sbrs	r25, 5
   1fdcc:	fc cf       	rjmp	.-8      	; 0x1fdc6 <putch>
  UDR0 = ch;
   1fdce:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
      [uartBit] "I" (UART_TX_BIT)
    :
      "r25"
  );
#endif
}
   1fdd2:	08 95       	ret

0001fdd4 <getch>:
      [uartBit] "I" (UART_RX_BIT)
    :
      "r25"
);
#else
  while(!(UCSR0A & _BV(RXC0)))
   1fdd4:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
   1fdd8:	87 ff       	sbrs	r24, 7
   1fdda:	fc cf       	rjmp	.-8      	; 0x1fdd4 <getch>
    ;
  if (!(UCSR0A & _BV(FE0))) {
   1fddc:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
   1fde0:	84 fd       	sbrc	r24, 4
   1fde2:	01 c0       	rjmp	.+2      	; 0x1fde6 <getch+0x12>
}
#endif

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
   1fde4:	a8 95       	wdr
       * don't care that an invalid char is returned...)
       */
    watchdogReset();
  }
  
  ch = UDR0;
   1fde6:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
  LED_PIN |= _BV(LED);
#endif
#endif

  return ch;
}
   1fdea:	08 95       	ret

0001fdec <verifySpace>:
  do getch(); while (--count);
  verifySpace();
}

void verifySpace() {
  if (getch() != CRC_EOP) {
   1fdec:	f3 df       	rcall	.-26     	; 0x1fdd4 <getch>
   1fdee:	80 32       	cpi	r24, 0x20	; 32
   1fdf0:	39 f0       	breq	.+14     	; 0x1fe00 <verifySpace+0x14>
    "wdr\n"
  );
}

void watchdogConfig(uint8_t x) {
  WDTCSR = _BV(WDCE) | _BV(WDE);
   1fdf2:	88 e1       	ldi	r24, 0x18	; 24
   1fdf4:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
  WDTCSR = x;
   1fdf8:	88 e0       	ldi	r24, 0x08	; 8
   1fdfa:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
   1fdfe:	ff cf       	rjmp	.-2      	; 0x1fdfe <verifySpace+0x12>
  if (getch() != CRC_EOP) {
    watchdogConfig(WATCHDOG_16MS);    // shorten WD timeout
    while (1)			      // and busy-loop so that WD causes
      ;				      //  a reset and app start.
  }
  putch(STK_INSYNC);
   1fe00:	84 e1       	ldi	r24, 0x14	; 20
   1fe02:	e1 cf       	rjmp	.-62     	; 0x1fdc6 <putch>

0001fe04 <getNch>:
    ::[count] "M" (UART_B_VALUE)
  );
}
#endif

void getNch(uint8_t count) {
   1fe04:	cf 93       	push	r28
  do getch(); while (--count);
   1fe06:	c8 2f       	mov	r28, r24
   1fe08:	e5 df       	rcall	.-54     	; 0x1fdd4 <getch>
   1fe0a:	c1 50       	subi	r28, 0x01	; 1
  verifySpace();
}
   1fe0c:	e9 f7       	brne	.-6      	; 0x1fe08 <getNch+0x4>
}
#endif

void getNch(uint8_t count) {
  do getch(); while (--count);
  verifySpace();
   1fe0e:	cf 91       	pop	r28
   1fe10:	ed cf       	rjmp	.-38     	; 0x1fdec <verifySpace>

0001fe12 <watchdogConfig>:
    "wdr\n"
  );
}

void watchdogConfig(uint8_t x) {
  WDTCSR = _BV(WDCE) | _BV(WDE);
   1fe12:	e0 e6       	ldi	r30, 0x60	; 96
   1fe14:	f0 e0       	ldi	r31, 0x00	; 0
   1fe16:	98 e1       	ldi	r25, 0x18	; 24
   1fe18:	90 83       	st	Z, r25
  WDTCSR = x;
   1fe1a:	80 83       	st	Z, r24
}
   1fe1c:	08 95       	ret

0001fe1e <appStart>:
    "wdr\n"
  );
}

void watchdogConfig(uint8_t x) {
  WDTCSR = _BV(WDCE) | _BV(WDE);
   1fe1e:	e0 e6       	ldi	r30, 0x60	; 96
   1fe20:	f0 e0       	ldi	r31, 0x00	; 0
   1fe22:	88 e1       	ldi	r24, 0x18	; 24
   1fe24:	80 83       	st	Z, r24
  WDTCSR = x;
   1fe26:	10 82       	st	Z, r1
}

void appStart() {
  watchdogConfig(WATCHDOG_OFF);
  __asm__ __volatile__ (
   1fe28:	ee 27       	eor	r30, r30
   1fe2a:	ff 27       	eor	r31, r31
   1fe2c:	09 94       	ijmp
